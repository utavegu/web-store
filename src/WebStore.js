import Banner from './components/Banner/Banner.jsx';
import Catalog from './components/Catalog/Catalog.jsx';
import Footer from './components/Footer/Footer.jsx';
import Header from './components/Header/Header.jsx';
import MainPage from './components/MainPage/MainPage.jsx';
import AboutPage from './components/AboutPage/AboutPage.jsx'
import ContactsPage from './components/ContactsPage/ContactsPage.jsx'
import Wrapper from './components/Wrapper/Wrapper.jsx';
import Page404 from './components/Page404/Page404.jsx';
import Cart from './components/Cart/Cart.jsx';
import {BrowserRouter as Router, Route, Switch} from 'react-router-dom';
import Provider from './provider/Provider';
import ProductPage from './components/ProductPage/ProductPage.jsx';

/*
ПЕРЕД ТЕМ, КАК ПРИСТУПЕШЬ КО ВСЕМ ДЕЛАМ С КОРЗИНОЙ - ПРИЧЕШИ КОД, ОН У ТЕБЯ НЕРЕАЛЬНО РАЗРОССЯ:
- Всё что можно в утил - в утил
- ЕНВ-переменные...
- Переделай функцию вытягивания данных. Попробуй, во всяком случае
- Провайдер-контекст почисти

А дальше уже начались сложные задачи... давай решать их по одной:
- Реализовать поиск
- Загрузить ещё... (но "все" - это нифига не все. Спроси у Эдгара на этот счёт)
- Корзина

ПОИСК
1) при первом клике открывает строку поиска (прямо в шапке) (пусть красиво выезжает)
2) при втором - если был введён какой-то текст, то перенаправляет пользователя на страницу каталога (/catalog.html), при этом в поисковом поле (уже каталога) должен быть отображён тот же текст, что был ввёден в строку поиска в шапке (и загрузка данных должна происходить исходя из этого)
3) Поиск на сервере работает по точному совпадению цвета (без учёта регистра, например "черный") и по содержанию слова для названия (без учёта регистра, например можно найти "жар" в "Туфли Жар-птицы").
4) Если пользователь не ввёл никакой текст, то строка поиска просто схлопывается обратно (как сейчас реализовано в html).

Что касается поиска в каталоге:
1) При заполнении этого поля отправляется запрос вида: GET http://localhost:7070/api/items?q=<текст в строке поиска>. 
2) При этом все правила относительно категории, кнопки "Загрузить ещё" сохраняются.
3) Если категория меняется, то данные перезагружаются с учётом строки поиска.
4) Строка поиска реагирует только на полный ввод (не live-поиск) (вот тут скорее всего привет троттлинг и дебаунс)

Так, начну реализацию с конца... Не помнимаю, как сервер должен реагировать на "текст в строке поиска"
1) Для начала надо понять как "призвать" товар по цвету или названию. Изучи для начала подробно код сервера, может это даст какое-то понимание. Потом изучай статьи







- Давай, кстати, в хитах продаж тоже избавься от контекста-провайдера, но сам его пока сохрани. Потом может переименуешь только. И внутри провайдера сохрани пример призыва контекста, использования

- Короче те компоненты, что без подкатегорий - высовывай наружу, а тем, что с категориями - одну папку на всех

НУ И ГДЕ-ТО ТУТ НАДО БУДЕТ ПОЧИСТИТЬ КОД, СДАТЬ НА ПЕРВУЮ ПРОВЕРКУ И ЗАДАТЬ ВОПРОСЫ ПО ТЕМ МЕСТАМ, ГДЕ НЕ ПОЛУЧИЛОСЬ

- Бэкенд (обязательно всё красиво делай - с трайкэтчаси и всеми возможными вариантами развития событий), данные, пропсы, мапы...

- С пропсами всегда проптайпс и дефолт пропс

- Определи в каком компоненте должны находиться данные. Разные лоадеры(прелоадеры?) на этом же этапе прикрутишь

- Хиты продаж - это тот же массив данных, что и для каталога, но с тру в булевом поле, которое говорит о том, что товар - хит продаж

- Помни про задачи внутри каталог-айтема

- Так, давай-ка вспоминай, как енв-переменные создавать... шестая глава (в провайдере задействовать)

- Походу надо навести порядок в структуре компонентов 

- Не забывай в нетворк поглядывать в процессе работы

1) Спросить у Эдгара про то, что скидал IMG в Public
2) Опять-таки - можно ли самому ковырять индекс в паблике... Ну пока так сделаю
3) Со скриптом внизу ХТМЛ-индекса пока не понял что делать. Позже поизучаю
4) Условный рендеринг в каталоге
5) Как передать пропсы в компонент, если там уже роутовские дела типа матч и локейшн?
6) Один контекст и провайдер на всё приложение
7) Со структурой нахерачил. Сначала хотел цсс-модули, но расхотел. И вложенность папок мне кажется сомнительным решением.
8) Джейсон фетс того, но вот такая штука, ибо стейт... Попробуй видоизменить функцию и в параметры передавать хук
9) Мне вот чисто по логике при такой реализации не нравится, что нет ссылки на подкаталоги. При просмотре товара всегда возвращаешься в категорию "все"
10) То, как я отрисовал поиск на экране каталога - в принципе рабочий вариант, хоть и выглядит как костыль. Но мне кажется от меня вообще какой-то другой способ реализации хотели.

*/

function WebStore() {
  return (
    <Provider>
      <Router>
        <Header />
        <Wrapper>
          <Banner />
          <Switch>
            <Route path="/catalog" component={Catalog} exact />
            <Route path="/catalog/:id([0-9]+)?" component={ProductPage} />
            <Route path="/about" component={AboutPage} />
            <Route path="/contacts" component={ContactsPage} />
            <Route path="/cart" component={Cart} />
            <Route path="/" exact component={MainPage} />
            <Route path="*" component={Page404} />
          </Switch>
        </Wrapper>
        <Footer />
      </Router>
    </Provider>
  );
}

export default WebStore;
